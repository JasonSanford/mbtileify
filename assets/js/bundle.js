(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){function bind(fn,me){return function(){return fn.apply(me,arguments)}}module.exports={bind:bind}},{}],2:[function(require,module,exports){var tilebelt=require("tilebelt");module.exports.geojson=function(geom,limits){var locked=getLocked(geom,limits);var tileFeatures=locked.map(function(t){return{type:"Feature",geometry:tilebelt.tileToGeoJSON(t),properties:{}}});return{type:"FeatureCollection",features:tileFeatures}};module.exports.tiles=function(geom,limits){var locked=getLocked(geom,limits);return locked};module.exports.indexes=function(geom,limits){var locked=getLocked(geom,limits);return locked.map(function(tile){return tilebelt.tileToQuadkey(tile)})};function getLocked(geom,limits){var locked,i,tileHash={};if(geom.type==="Point"){locked=[tilebelt.pointToTile(geom.coordinates[0],geom.coordinates[1],limits.max_zoom)]}else if(geom.type==="MultiPoint"){var quadkeys={};locked=[];for(i=0;i<geom.coordinates.length;i++){var tile=tilebelt.pointToTile(geom.coordinates[i][0],geom.coordinates[i][1],limits.max_zoom);var quadkey=tilebelt.tileToQuadkey(tile);if(!quadkeys[quadkey]){quadkeys[quadkey]=true;locked.push(tile)}}}else if(geom.type==="LineString"){lineCover(tileHash,geom.coordinates,limits.max_zoom)}else if(geom.type==="MultiLineString"){for(i=0;i<geom.coordinates.length;i++){lineCover(tileHash,geom.coordinates[i],limits.max_zoom)}}else if(geom.type==="Polygon"){polyRingCover(tileHash,geom.coordinates,limits.max_zoom)}else if(geom.type==="MultiPolygon"){for(i=0;i<geom.coordinates.length;i++){polyRingCover(tileHash,geom.coordinates[i],limits.max_zoom)}}else{throw new Error("Geometry type not implemented")}if(!locked){if(limits.min_zoom!==limits.max_zoom){tileHash=mergeTiles(tileHash,limits)}locked=hashToArray(tileHash)}return locked}function mergeTiles(tileHash,limits){var mergedTileHash={};for(var z=limits.max_zoom;z>limits.min_zoom;z--){var keys=Object.keys(tileHash);var parentTileHash={};for(var i=0;i<keys.length;i++){var id1=+keys[i],t=fromID(id1);if(t[0]%2===0&&t[1]%2===0){var id2=toID(t[0]+1,t[1],z),id3=toID(t[0],t[1]+1,z),id4=toID(t[0]+1,t[1]+1,z);if(tileHash[id2]&&tileHash[id3]&&tileHash[id4]){tileHash[id1]=false;tileHash[id2]=false;tileHash[id3]=false;tileHash[id4]=false;var parentId=toID(t[0]/2,t[1]/2,z-1);(z-1===limits.min_zoom?mergedTileHash:parentTileHash)[parentId]=true}}}for(var i=0;i<keys.length;i++){if(tileHash[keys[i]]){mergedTileHash[+keys[i]]=true}}tileHash=parentTileHash}return mergedTileHash}function polyRingCover(tileHash,geom,max_zoom){var tiled=getTiledPoly(geom,max_zoom);var y=tiled.minY;while(y<=tiled.maxY){var intersections=[];for(var r=0;r<tiled.geom.length;r++){var ring=tiled.geom[r];for(var i=0;i<ring.length;i++){var curr=ring[i];var next=ring[i+1]||ring[0];var localMin=isLocalMin(i,ring);var localMax=isLocalMax(i,ring);var intersection=lineIntersects(0,y,1,y,curr[0],curr[1],next[0],next[1],localMin||localMax);if(intersection){intersections.push([Math.round(intersection[0]),Math.round(intersection[1]),r,i,"nonhoriz",localMin,localMax])}}}intersections.sort(compareX);for(var i=0;i<intersections.length-1;i++){if(i%2===0){var enter=intersections[i][0];var exit=intersections[i+1][0];var x=enter;while(x<=exit){tileHash[toID(x,y,max_zoom)]=true;x++}}}y++}for(var i=0;i<geom.length;i++){lineCover(tileHash,geom[i],max_zoom)}}function compareX(a,b){return a[0]-b[0]}module.exports.getTiledPoly=getTiledPoly;function getTiledPoly(geom,max_zoom,latlon){var minY=Infinity;var maxY=-Infinity;var tiled=[];var ring;var last;for(var i=0;i<geom.length;i++){tiledRing=[];last=[];for(var k=0;k<geom[i].length;k++){var next=tilebelt.pointToTile(geom[i][k][0],geom[i][k][1],max_zoom);if(latlon){var bbox=tilebelt.tileToBBOX(next,max_zoom);next=[bbox[0]+(bbox[2]-bbox[0])*.5,bbox[1]+(bbox[3]-bbox[1])*.5]}if(last[0]===next[0]&&last[1]===next[1])continue;minY=Math.min(minY,next[1]);maxY=Math.max(maxY,next[1]);tiledRing.push(next);last=next}if(tiledRing.length>=4)tiled.push(tiledRing)}return{minY:minY,maxY:maxY,geom:tiled}}module.exports.isLocalMin=isLocalMin;module.exports.isLocalMax=isLocalMax;function isLocalMin(i,ring){var mod=ring.length;var prev=ring[i];var curr=ring[(i+1)%mod];var next=ring[(i+2)%mod];if(curr[1]>=prev[1])return false;var j=(i+1)%mod;while(j!==i&&curr[1]===next[1]){next=ring[(j+2)%mod];j=(j+1)%mod}return curr[1]<next[1]}function isLocalMax(i,ring){var mod=ring.length;var prev=ring[i];var curr=ring[(i+1)%mod];var next=ring[(i+2)%mod];if(curr[1]<=prev[1])return false;var j=(i+1)%mod;while(j!==i&&curr[1]===next[1]){next=ring[(j+2)%mod];j=(j+1)%mod}return curr[1]>next[1]}function lineIntersects(line1StartX,line1StartY,line1EndX,line1EndY,line2StartX,line2StartY,line2EndX,line2EndY,localMinMax){var denominator,a,b,numerator1,numerator2,onLine1=false,onLine2=false,res=[null,null];denominator=(line2EndY-line2StartY)*(line1EndX-line1StartX)-(line2EndX-line2StartX)*(line1EndY-line1StartY);if(denominator===0){if(res[0]!==null&&res[1]!==null){return res}else{return false}}a=line1StartY-line2StartY;b=line1StartX-line2StartX;numerator1=(line2EndX-line2StartX)*a-(line2EndY-line2StartY)*b;numerator2=(line1EndX-line1StartX)*a-(line1EndY-line1StartY)*b;a=numerator1/denominator;b=numerator2/denominator;res[0]=line1StartX+a*(line1EndX-line1StartX);res[1]=line1StartY+a*(line1EndY-line1StartY);if(b>0&&b<1||res[0]===line2StartX&&res[1]===line2StartY||localMinMax&&res[0]===line2EndX&&res[1]===line2EndY){return res}else{return false}}function lineCover(tileHash,coords,max_zoom){for(var i=0;i<coords.length-1;i++){var start=tilebelt.pointToTileFraction(coords[i][0],coords[i][1],max_zoom),stop=tilebelt.pointToTileFraction(coords[i+1][0],coords[i+1][1],max_zoom),x0=start[0],y0=start[1],x1=stop[0],y1=stop[1],dx=x1-x0,dy=y1-y0,sx=dx>0?1:-1,sy=dy>0?1:-1,x=Math.floor(x0),y=Math.floor(y0),tMaxX=Math.abs(((dx>0?1:0)+x-x0)/dx),tMaxY=Math.abs(((dy>0?1:0)+y-y0)/dy),tdx=Math.abs(sx/dx),tdy=Math.abs(sy/dy);tileHash[toID(x,y,max_zoom)]=true;if(dy===0&&dx===0)continue;if(isNaN(tMaxX))tMaxX=Infinity;if(isNaN(tMaxY))tMaxY=Infinity;while(tMaxX<1||tMaxY<1){if(tMaxX<tMaxY){tMaxX+=tdx;x+=sx}else{tMaxY+=tdy;y+=sy}tileHash[toID(x,y,max_zoom)]=true}}}function hashToArray(hash){var keys=Object.keys(hash);var tiles=[];for(var i=0;i<keys.length;i++){tiles.push(fromID(+keys[i]))}return tiles}function toID(x,y,z){var dim=2*(1<<z);return(dim*y+x)*32+z}function fromID(id){var z=id%32,dim=2*(1<<z),xy=(id-z)/32,x=xy%dim,y=(xy-x)/dim%dim;return[x,y,z]}},{tilebelt:3}],3:[function(require,module,exports){var d2r=Math.PI/180,r2d=180/Math.PI;function tileToBBOX(tile){var e=tile2lon(tile[0]+1,tile[2]);var w=tile2lon(tile[0],tile[2]);var s=tile2lat(tile[1]+1,tile[2]);var n=tile2lat(tile[1],tile[2]);return[w,s,e,n]}function tileToGeoJSON(tile){var bbox=tileToBBOX(tile);var poly={type:"Polygon",coordinates:[[[bbox[0],bbox[1]],[bbox[0],bbox[3]],[bbox[2],bbox[3]],[bbox[2],bbox[1]],[bbox[0],bbox[1]]]]};return poly}function tile2lon(x,z){return x/Math.pow(2,z)*360-180}function tile2lat(y,z){var n=Math.PI-2*Math.PI*y/Math.pow(2,z);return r2d*Math.atan(.5*(Math.exp(n)-Math.exp(-n)))}function pointToTile(lon,lat,z){var latr=lat*d2r,z2=Math.pow(2,z);return[Math.floor((lon+180)/360*z2),Math.floor((1-Math.log(Math.tan(latr)+1/Math.cos(latr))/Math.PI)/2*z2),z]}function getChildren(tile){return[[tile[0]*2,tile[1]*2,tile[2]+1],[tile[0]*2+1,tile[1]*2,tile[2]+1],[tile[0]*2+1,tile[1]*2+1,tile[2]+1],[tile[0]*2,tile[1]*2+1,tile[2]+1]]}function getParent(tile){if(tile[0]%2===0&&tile[1]%2===0){return[tile[0]/2,tile[1]/2,tile[2]-1]}else if(tile[0]%2===0&&!tile[1]%2===0){return[tile[0]/2,(tile[1]-1)/2,tile[2]-1]}else if(!tile[0]%2===0&&tile[1]%2===0){return[(tile[0]-1)/2,tile[1]/2,tile[2]-1]}else{return[(tile[0]-1)/2,(tile[1]-1)/2,tile[2]-1]}}function getSiblings(tile){return getChildren(getParent(tile))}function hasSiblings(tile,tiles){var siblings=getSiblings(tile);for(var i=0;i<siblings.length;i++){if(!hasTile(tiles,siblings[i]))return false}return true}function hasTile(tiles,tile){for(var i=0;i<tiles.length;i++){if(tilesEqual(tiles[i],tile))return true}return false}function tilesEqual(tile1,tile2){return tile1[0]===tile2[0]&&tile1[1]===tile2[1]&&tile1[2]===tile2[2]}function tileToQuadkey(tile){var index="";for(var z=tile[2];z>0;z--){var b=0;var mask=1<<z-1;if((tile[0]&mask)!==0)b++;if((tile[1]&mask)!==0)b+=2;index+=b.toString()}return index}function quadkeyToTile(quadkey){var x=0;var y=0;var z=quadkey.length;for(var i=z;i>0;i--){var mask=1<<i-1;switch(quadkey[z-i]){case"0":break;case"1":x|=mask;break;case"2":y|=mask;break;case"3":x|=mask;y|=mask;break}}return[x,y,z]}function bboxToTile(bboxCoords){var min=pointToTile(bboxCoords[0],bboxCoords[1],32);var max=pointToTile(bboxCoords[2],bboxCoords[3],32);var bbox=[min[0],min[1],max[0],max[1]];var z=getBboxZoom(bbox);if(z===0)return[0,0,0];var x=bbox[0]>>>32-z;var y=bbox[1]>>>32-z;return[x,y,z]}function getBboxZoom(bbox){var MAX_ZOOM=28;for(var z=0;z<MAX_ZOOM;z++){var mask=1<<32-(z+1);if((bbox[0]&mask)!=(bbox[2]&mask)||(bbox[1]&mask)!=(bbox[3]&mask)){return z}}return MAX_ZOOM}function pointToTileFraction(lon,lat,z){var tile=pointToTile(lon,lat,z);var bbox=tileToBBOX(tile);var xTileOffset=bbox[2]-bbox[0];var xPointOffset=lon-bbox[0];var xPercentOffset=xPointOffset/xTileOffset;var yTileOffset=bbox[1]-bbox[3];var yPointOffset=lat-bbox[3];var yPercentOffset=yPointOffset/yTileOffset;return[tile[0]+xPercentOffset,tile[1]+yPercentOffset,z]}module.exports={tileToGeoJSON:tileToGeoJSON,tileToBBOX:tileToBBOX,getChildren:getChildren,getParent:getParent,getSiblings:getSiblings,hasTile:hasTile,hasSiblings:hasSiblings,tilesEqual:tilesEqual,tileToQuadkey:tileToQuadkey,quadkeyToTile:quadkeyToTile,pointToTile:pointToTile,bboxToTile:bboxToTile,pointToTileFraction:pointToTileFraction}},{}],4:[function(require,module,exports){var cover=require("tile-cover");var utils=require("./utils");function App(){var me=this;this.drawCreated=utils.bind(this.drawCreated,this);this.drawStart=utils.bind(this.drawStart,this);this.drawDeleted=utils.bind(this.drawDeleted,this);this.boundsUpdated=utils.bind(this.boundsUpdated,this);this.alertIntroElem=document.querySelectorAll(".alert-intro")[0];this.formElem=document.querySelectorAll(".form-horizontal")[0];this.boundsXMinElem=document.querySelectorAll(".bounds-xmin")[0];this.boundsYMinElem=document.querySelectorAll(".bounds-ymin")[0];this.boundsXMaxElem=document.querySelectorAll(".bounds-xmax")[0];this.boundsYMaxElem=document.querySelectorAll(".bounds-ymax")[0];this.zoomElems=document.querySelectorAll(".min-zoom, .max-zoom");this.minZoomElem=document.querySelectorAll(".min-zoom")[0];this.maxZoomElem=document.querySelectorAll(".max-zoom")[0];this.map=new Map;this.featureGroup=L.featureGroup();this.featureGroup.addTo(this.map);this.drawControl=new DrawControl(this.featureGroup);this.drawControl.control.addTo(this.map);this.tileCountDisplay=new TileCountDisplay;this.map.on("draw:created",this.drawCreated);this.map.on("draw:drawstart",this.drawStart);this.map.on("draw:editstop",this.boundsUpdated);this.map.on("draw:deleted",this.drawDeleted);[].forEach.call(this.zoomElems,function(zoom){zoom.addEventListener("change",function(event){var value=parseInt(this.value,10);if(zoom.classList.contains("min-zoom")){if(value>parseInt(me.maxZoomElem.value,10)){this.value=me.maxZoomElem.value}else{me.calculateTileCover()}}else{if(value<parseInt(me.minZoomElem.value,10)){this.value=me.minZoomElem.value}else{me.calculateTileCover()}}},false)})}App.prototype.drawStart=function(){this.alertIntroElem.style.display="none";this.formElem.style.display="block";this.tileCountDisplay.show();this.clearCurrentFeature()};App.prototype.drawCreated=function(event){this.featureGroup.addLayer(event.layer);this.boundsUpdated()};App.prototype.drawDeleted=function(){this.alertIntroElem.style.display="block";this.formElem.style.display="none";this.tileCountDisplay.clear();this.tileCountDisplay.hide();this.boundsUpdated()};App.prototype.clearCurrentFeature=function(){this.featureGroup.clearLayers()};App.prototype.boundsUpdated=function(){var layers=this.featureGroup.getLayers();var layer=layers.length?layers[0]:null;if(layer){this.bounds=layer.getBounds();var sw=this.bounds.getSouthWest();var ne=this.bounds.getNorthEast();this.boundsXMinElem.value=sw.lng;this.boundsYMinElem.value=sw.lat;this.boundsXMaxElem.value=ne.lng;this.boundsYMaxElem.value=ne.lat;this.calculateTileCover()}else{this.bounds=null}};App.prototype.calculateTileCover=function(){var minZoom=parseInt(this.minZoomElem.value,10);var maxZoom=parseInt(this.maxZoomElem.value,10);var sw=this.bounds.getSouthWest();var ne=this.bounds.getNorthEast();var geom={type:"Polygon",coordinates:[[[sw.lng,sw.lat],[sw.lng,ne.lat],[ne.lng,ne.lat],[ne.lng,sw.lat],[sw.lng,sw.lat]]]};var tiles={};for(var i=minZoom;i<=maxZoom;i++){tiles[i]=cover.tiles(geom,{min_zoom:i,max_zoom:i})}this.tileCountDisplay.update(tiles);this.tileCountDisplay.show()};function Map(){L.mapbox.accessToken="pk.eyJ1IjoiamNzYW5mb3JkIiwiYSI6InRJMHZPZFUifQ.F4DMGoNgU3r2AWLY0Eni-w";var map=L.mapbox.map("map","jcsanford.kmdnbkib");return map}function TileCountDisplay(){this.container=document.querySelectorAll(".tile-count-display")[0];this.display=document.querySelectorAll(".tile-count")[0]}TileCountDisplay.prototype.update=function(tiles){var zoom,zoomTiles;var htmlParts=[];var totalCount=0;for(zoom in tiles){zoomTiles=tiles[zoom];totalCount+=zoomTiles.length;htmlParts.push("<h5>"+zoom+": <small>"+zoomTiles.length+"</small></h5>")}htmlParts.push("<hr>");htmlParts.push("<h5>Total: <small>"+totalCount+"</small></h5>");this.display.innerHTML=htmlParts.join("")};TileCountDisplay.prototype.clear=function(){this.display.innerHTML=""};TileCountDisplay.prototype.show=function(){this.container.style.display="block"};TileCountDisplay.prototype.hide=function(){this.container.style.display="none"};function DrawControl(featureGroup){this.control=new L.Control.Draw({edit:{featureGroup:featureGroup},draw:{polyline:false,polygon:false,circle:false,marker:false,rectangle:{shapeOptions:{color:"#333",fillColor:"#333",opacity:1,fillOpacity:.5,weight:2}}}})}new App},{"./utils":1,"tile-cover":2}]},{},[4]);
